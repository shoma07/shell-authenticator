#!/bin/sh

DEFAULT_INTERVAL=30
DEFAULT_DIGITS=6

timeint () {
  echo "$(date -u +%s)"
}

timecode () {
  echo "$(($(timeint)/${DEFAULT_INTERVAL}))"
}

generate_hmac () {
  if [ -p /dev/stdin ]; then args=`cat -`; else args=$@; fi
  # echo "$(echo $(echo $(timecode) | int2bytestring) | openssl dgst -sha1 -hmac ${args})"
  printf "%s\n" "$(printf "%s\n" $(echo $(timecode) | int2bytestring) | openssl dgst -sha1 -hmac ${args})"
}

ord () {
  if [ -p /dev/stdin ]; then args=`cat -`; else args=$@; fi
  echo "${args}" | xxd -b -c1 | head -n 1 | while read one two three; do
    echo "${two}" | xargs -I@ dc -e "10o 2i @ p"
  done
}

int2bytestring () {
  if [ -p /dev/stdin ]; then args=`cat -`; else args=$@; fi
  int=${args[0]}
  array=()
  result=()
  while :; do
    array+=("$((${int}&0xFF))")
    int=$((${int}>>8))
    if [ ${int} = 0 ]; then break; fi
  done
  for (( i = 7; i >= 0; i-- )); do
    if [ -z "${array[i]}" ]; then
      printf "\\\x%02X" 0
    else
      printf "\\\x%02X" ${array[i]}
    fi
  done
  printf "\n"
}

chr () {
  if [ -p /dev/stdin ]; then args=`cat -`; else args=$1; fi
  printf "\\\x%02X\n" ${args}
}

generate_otp () {
  if [ -p /dev/stdin ]; then args=`cat -`; else args=$@; fi
  hmac=$(echo ${args} | generate_hmac)
  offset=$(($(echo ${hmac:20:1} | ord)&15))
  echo ${offset}
  code1=$(($(($(echo ${hmac:${offset}:1} | ord)&7))<<24))
  code2=$(($(($(echo ${hmac:$((${offset}+1)):1} | ord)&7))<<16))
  code3=$(($(($(echo ${hmac:$((${offset}+2)):1} | ord)&7))<<8))
  code4=$(($(echo ${hmac:$((${offset}+3)):1} | ord)&7))
  code=$((${code1}|${code2}|${code3}|${code4}))
  echo $((${code}%10**${DEFAULT_DIGITS})) | xargs -I @ printf %06d @
}

# echo ${1} | generate_otp
echo $(generate_hmac "y6csbln7caazq7zkvxjklwt5zujntf44")

# otpauth://totp/TestApp:test@example.com?secret=y6csbln7caazq7zkvxjklwt5zujntf44&issuer=TestApp

# echo $(timecode) | int2bytestring
# echo "52475501" | int2bytestring
# echo $(echo $(echo $1) | generate_hmac)
